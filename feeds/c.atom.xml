<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>輝夜の永遠亭</title><link href="http://tadvent.github.io/" rel="alternate"></link><link href="http://tadvent.github.io/feeds/c.atom.xml" rel="self"></link><id>http://tadvent.github.io/</id><updated>2014-12-10T17:45:00+08:00</updated><entry><title>指针和虚函数表</title><link href="http://tadvent.github.io/posts/2014/pointer-vptr/" rel="alternate"></link><updated>2014-12-10T17:45:00+08:00</updated><author><name>tadvent(輝夜)</name></author><id>tag:tadvent.github.io,2014-12-10:posts/2014/pointer-vptr/</id><summary type="html">&lt;p&gt;前两天在水木 C++ 版看到两个题目，分别是关于指针和 class 的虚函数表的。关于指针和数组，之前已经打过很久的交道了，比较简单。不过虚函数表以及 class 成员的内存布局一直是模模糊糊的概念，趁此机会把《C++对象模型》拿出来研究了一把。&lt;/p&gt;
&lt;h2&gt;题目一&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include&amp;lt;stdio.h&amp;gt;  &lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;  
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d,%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出什么？&lt;/p&gt;
&lt;p&gt;数组和指针类型的互相转换，只要弄清楚指针所指地址以及所指的类型就容易分析了：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; 的类型是 &lt;code&gt;int[5]&lt;/code&gt;，表示一个长度为 5 的 &lt;code&gt;int&lt;/code&gt; 型数组&lt;/li&gt;
&lt;li&gt;由于 &lt;code&gt;a&lt;/code&gt; 的类型是数组，因此对 &lt;code&gt;a&lt;/code&gt; 进行算数运算时，其所指地址是以 &lt;code&gt;sizeof(A[0])&lt;/code&gt; 为单位变化的，这里即是 &lt;code&gt;sizeof(int)&lt;/code&gt;，因此 &lt;code&gt;*(a+1)&lt;/code&gt; 是 &lt;code&gt;a[1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对 &lt;code&gt;a&lt;/code&gt; 取地址，得到的类型是 &lt;code&gt;int (*)[5]&lt;/code&gt;，这是一个指针，其指向一个含有 5 个 &lt;code&gt;int&lt;/code&gt; 的数组。因此 &lt;code&gt;&amp;amp;a+1&lt;/code&gt; 会使地址向后移动 5 个 &lt;code&gt;int&lt;/code&gt; 的空间，得到 &lt;code&gt;a[5]&lt;/code&gt; 的地址。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ptr&lt;/code&gt; 是 &lt;code&gt;int*&lt;/code&gt; 类型，因此它的算数运算的单位是 &lt;code&gt;sizeof(int)&lt;/code&gt;，&lt;code&gt;ptr-1&lt;/code&gt; 即可得到 &lt;code&gt;a[4]&lt;/code&gt; 的地址。&lt;/li&gt;
&lt;li&gt;综上，程序输出 2,5&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h2&gt;题目二&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;A::g&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;A::f&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;B::g&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;B::h&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="nf"&gt;void&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Fun&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Fun&lt;/span&gt; &lt;span class="n"&gt;pFun&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;pFun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Fun&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;pFun&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;程序输出什么？&lt;/p&gt;
&lt;p&gt;看那一串丧心病狂的指针操作！！&lt;/p&gt;
&lt;p&gt;class 层次很简单，A 里有两个虚函数 g() 和 f()，B 里重写了 g()，又添了一个 h()。A 里那个 private 是多余，所有函数都是 private 的。 main() 里主要就是对那个函数指针 pFun 赋值，然后调用。看来所有的内容都在那个指针操作里。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;(&amp;amp;b)&lt;/code&gt; 得到 &lt;code&gt;b&lt;/code&gt; 的地址，类型是 &lt;code&gt;B*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*(int*)(&amp;amp;b)&lt;/code&gt; 将 &lt;code&gt;b&lt;/code&gt; 的地址按 &lt;code&gt;int&lt;/code&gt; 型指针来解释，并取出这个 &lt;code&gt;int&lt;/code&gt; 值。相当于将 &lt;code&gt;b&lt;/code&gt; 的前 4 个字节 (32位环境下) 当成一个 &lt;code&gt;int&lt;/code&gt; 型读出。假设读出的值是 &lt;code&gt;vptr&lt;/code&gt; （好吧……其实就是 vptr）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*((int*)vptr + i)&lt;/code&gt; 将上一个操作取出的值再当成一个地址，并添加 &lt;code&gt;i&lt;/code&gt; 个单位偏移。由于是 &lt;code&gt;int*&lt;/code&gt; 类型，因此每次偏移一个 &lt;code&gt;sizeof(int)&lt;/code&gt; 的空间，即 4 字节。粗略来说就相当于读出 &lt;code&gt;vptr[i]&lt;/code&gt; 的值。&lt;/li&gt;
&lt;li&gt;最后再转换为 &lt;code&gt;Fun&lt;/code&gt; 的函数指针。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用一个图来看一下：
&lt;img alt="vptr" src="http://tadvent.github.io/posts/2014-12-10-vptr.png" title="vptr 的指针操作" /&gt;&lt;/p&gt;
&lt;p&gt;class A 里有两个虚函数，因此它的虚函数表只有两项，分别是 A::g() 和 A::f()。class B 继承自 A，因此它必须首先照搬 A 的虚函数表（前 2 项），然后再添加自己新加的 B::h()，同时在 B 中又重写了 g()，因此 B 的虚函数表里把 A::g() 的位置替换为 B::g()。&lt;/p&gt;
&lt;p&gt;根据前面指针的分析可以看出，三次循环分别调用了 B::g(), A::f() 和 B::h()。不过这个调用比较粗暴，完全无视了函数参数。本身类成员函数是带有一个 this 指针做参数的，不过既然这里也没有使用成员变量，因此也就没什么影响了。&lt;/p&gt;
&lt;p&gt;以上程序能够成功运行的条件是 class 的虚函数指针位于对象的头部。我试着在 class A 和 class B 中分别添加一个 int 成员，输出结果依然不变（VS2013 和 gcc4.9.2 下），说明这两个编译器都将虚函数指针放在对象头部，没有再试验其他环境，不知道会不会有不同结果。另外，如果是 64位 环境，应将指针变换那一行的所有 int 换成 int64_t 或 long long，不然指针和 int 所占空间不同，地址运算会出错。&lt;/p&gt;</summary><category term="C++"></category></entry></feed>