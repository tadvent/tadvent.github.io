<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>輝夜の永遠亭</title><link href="http://tadvent.github.io/" rel="alternate"></link><link href="http://tadvent.github.io/feeds/all.atom.xml" rel="self"></link><id>http://tadvent.github.io/</id><updated>2014-12-12T14:25:00+08:00</updated><entry><title>C++ 的 ScopeExitGuard</title><link href="http://tadvent.github.io/posts/2014/scope-exit-guard/" rel="alternate"></link><updated>2014-12-12T14:25:00+08:00</updated><author><name>tadvent(輝夜)</name></author><id>tag:tadvent.github.io,2014-12-12:posts/2014/scope-exit-guard/</id><summary type="html">&lt;p&gt;C++ 提供了 RAII 机制，并提倡使用它来管理各种资源，可是在实际中会发现这一套使用起来并不如想象中的那么方便。在 Linux 下开发会遇到大量 open() / close() 或是 malloc() / free() 类似操作，而且大部分都没有现成好用的 C++ wrapper，如果每组操作都自己去寨一个 class OperationGuard 只用来管理资源释放未免又显得过于繁琐。&lt;/p&gt;
&lt;p&gt;其实我需要的只是在退出作用域时自动执行一些清理操作，如果能方便的把要进行的操作封装在一个临时对象的析构函数里就好了。在网上搜索了一下，果然已经有很多人想到了这个问题，现成的实现有 Boost 的 SCOPE_EXIT，看了一下支持的功能很多，用起来也比想象中复杂了不少。于是还是自己来寨一个好了，也不用很复杂：（以下实现参考了&lt;a href="http://the-witness.net/news/2012/11/scopeexit-in-c11/"&gt;SCOPE(EXIT) IN C++11&lt;/a&gt;）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;F&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ScopeExitGuard_Impl&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="n"&gt;_f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ScopeExitGuard_Impl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;ScopeExitGuard_Impl&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;_f&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;F&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;ScopeExitGuard_Impl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ScopeExitGuard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ScopeExitGuard_Impl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;#define SCOPE_EXIT_GUARD(code) \&lt;/span&gt;
&lt;span class="cp"&gt;    auto scope_exit_##__LINE__ = ScopeExitGuard([&amp;amp;]{code;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;C++11 的 lambda 真是好用啊。在 &lt;a href="http://the-witness.net/news/2012/11/scopeexit-in-c11/"&gt;SCOPE(EXIT) IN C++11&lt;/a&gt; 那篇中，lambda 使用了 [=] 来获取外部变量，这样一来就只能读取，无法改写。我在上面的 lambda 中改为 [&amp;amp;] 方便改写外部变量。&lt;/p&gt;
&lt;p&gt;使用起来很简单：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;SCOPE_EXIT_GUARD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// print: 2&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="c1"&gt;// label 1&lt;/span&gt;
    &lt;span class="n"&gt;SCOPE_EXIT_GUARD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果在 ::operator new() 语句或 label 1 处抛出异常，::operator delete() 就不会被调用，因此只需把释放资源的 SCOPE_EXIT_GURAD 语句与申请资源的语句放在一起就好。&lt;/p&gt;</summary><category term="C++"></category></entry><entry><title>指针和虚函数表</title><link href="http://tadvent.github.io/posts/2014/pointer-vptr/" rel="alternate"></link><updated>2014-12-10T17:45:00+08:00</updated><author><name>tadvent(輝夜)</name></author><id>tag:tadvent.github.io,2014-12-10:posts/2014/pointer-vptr/</id><summary type="html">&lt;p&gt;前两天在水木 C++ 版看到两个题目，分别是关于指针和 class 的虚函数表的。关于指针和数组，之前已经打过很久的交道了，比较简单。不过虚函数表以及 class 成员的内存布局一直是模模糊糊的概念，趁此机会把《C++对象模型》拿出来研究了一把。&lt;/p&gt;
&lt;h2&gt;题目一&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include&amp;lt;stdio.h&amp;gt;  &lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;  
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d,%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出什么？&lt;/p&gt;
&lt;p&gt;数组和指针类型的互相转换，只要弄清楚指针所指地址以及所指的类型就容易分析了：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; 的类型是 &lt;code&gt;int[5]&lt;/code&gt;，表示一个长度为 5 的 &lt;code&gt;int&lt;/code&gt; 型数组&lt;/li&gt;
&lt;li&gt;由于 &lt;code&gt;a&lt;/code&gt; 的类型是数组，因此对 &lt;code&gt;a&lt;/code&gt; 进行算数运算时，其所指地址是以 &lt;code&gt;sizeof(A[0])&lt;/code&gt; 为单位变化的，这里即是 &lt;code&gt;sizeof(int)&lt;/code&gt;，因此 &lt;code&gt;*(a+1)&lt;/code&gt; 是 &lt;code&gt;a[1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对 &lt;code&gt;a&lt;/code&gt; 取地址，得到的类型是 &lt;code&gt;int (*)[5]&lt;/code&gt;，这是一个指针，其指向一个含有 5 个 &lt;code&gt;int&lt;/code&gt; 的数组。因此 &lt;code&gt;&amp;amp;a+1&lt;/code&gt; 会使地址向后移动 5 个 &lt;code&gt;int&lt;/code&gt; 的空间，得到 &lt;code&gt;a[5]&lt;/code&gt; 的地址。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ptr&lt;/code&gt; 是 &lt;code&gt;int*&lt;/code&gt; 类型，因此它的算数运算的单位是 &lt;code&gt;sizeof(int)&lt;/code&gt;，&lt;code&gt;ptr-1&lt;/code&gt; 即可得到 &lt;code&gt;a[4]&lt;/code&gt; 的地址。&lt;/li&gt;
&lt;li&gt;综上，程序输出 2,5&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h2&gt;题目二&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;A::g&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;A::f&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;B::g&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;B::h&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="nf"&gt;void&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Fun&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Fun&lt;/span&gt; &lt;span class="n"&gt;pFun&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;pFun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Fun&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;pFun&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;程序输出什么？&lt;/p&gt;
&lt;p&gt;看那一串丧心病狂的指针操作！！&lt;/p&gt;
&lt;p&gt;class 层次很简单，A 里有两个虚函数 g() 和 f()，B 里重写了 g()，又添了一个 h()。A 里那个 private 是多余，所有函数都是 private 的。 main() 里主要就是对那个函数指针 pFun 赋值，然后调用。看来所有的内容都在那个指针操作里。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;(&amp;amp;b)&lt;/code&gt; 得到 &lt;code&gt;b&lt;/code&gt; 的地址，类型是 &lt;code&gt;B*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*(int*)(&amp;amp;b)&lt;/code&gt; 将 &lt;code&gt;b&lt;/code&gt; 的地址按 &lt;code&gt;int&lt;/code&gt; 型指针来解释，并取出这个 &lt;code&gt;int&lt;/code&gt; 值。相当于将 &lt;code&gt;b&lt;/code&gt; 的前 4 个字节 (32位环境下) 当成一个 &lt;code&gt;int&lt;/code&gt; 型读出。假设读出的值是 &lt;code&gt;vptr&lt;/code&gt; （好吧……其实就是 vptr）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*((int*)vptr + i)&lt;/code&gt; 将上一个操作取出的值再当成一个地址，并添加 &lt;code&gt;i&lt;/code&gt; 个单位偏移。由于是 &lt;code&gt;int*&lt;/code&gt; 类型，因此每次偏移一个 &lt;code&gt;sizeof(int)&lt;/code&gt; 的空间，即 4 字节。粗略来说就相当于读出 &lt;code&gt;vptr[i]&lt;/code&gt; 的值。&lt;/li&gt;
&lt;li&gt;最后再转换为 &lt;code&gt;Fun&lt;/code&gt; 的函数指针。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用一个图来看一下：
&lt;img alt="vptr" src="http://tadvent.github.io/posts/2014-12-10-vptr.png" title="vptr 的指针操作" /&gt;&lt;/p&gt;
&lt;p&gt;class A 里有两个虚函数，因此它的虚函数表只有两项，分别是 A::g() 和 A::f()。class B 继承自 A，因此它必须首先照搬 A 的虚函数表（前 2 项），然后再添加自己新加的 B::h()，同时在 B 中又重写了 g()，因此 B 的虚函数表里把 A::g() 的位置替换为 B::g()。&lt;/p&gt;
&lt;p&gt;根据前面指针的分析可以看出，三次循环分别调用了 B::g(), A::f() 和 B::h()。不过这个调用比较粗暴，完全无视了函数参数。本身类成员函数是带有一个 this 指针做参数的，不过既然这里也没有使用成员变量，因此也就没什么影响了。&lt;/p&gt;
&lt;p&gt;以上程序能够成功运行的条件是 class 的虚函数指针位于对象的头部。我试着在 class A 和 class B 中分别添加一个 int 成员，输出结果依然不变（VS2013 和 gcc4.9.2 下），说明这两个编译器都将虚函数指针放在对象头部，没有再试验其他环境，不知道会不会有不同结果。另外，如果是 64位 环境，应将指针变换那一行的所有 int 换成 int64_t 或 long long，不然指针和 int 所占空间不同，地址运算会出错。&lt;/p&gt;</summary><category term="C++"></category></entry><entry><title>Hello Pelican ~</title><link href="http://tadvent.github.io/posts/2014/hello-pelican/" rel="alternate"></link><updated>2014-12-02T22:15:00+08:00</updated><author><name>tadvent(輝夜)</name></author><id>tag:tadvent.github.io,2014-12-02:posts/2014/hello-pelican/</id><summary type="html">&lt;p&gt;这是使用 pelican 发布的第一篇文章。&lt;/p&gt;
&lt;p&gt;其实从很早就开始写 Blog 了，主要是在微软的 Live Space 上（最开始貌似叫做 MSN Space 之类），可惜由于微软一向的坑队友传统，09 年迫不得已全面迁移至 wordpress.com，但是 wordpress 的风格总觉得不习惯，从 Live Space 迁来的文章在兼容性上似乎也有问题，以前一同交流 blog 的小伙伴也失踪了不少，于是就停了很久一段。其间在其他国内 blog 系统上也尝试过继续，可惜由于各种原因（主要是懒啦 = =）都没有写多少。今年夏季开始在 Github 上码代码，后来闲逛时偶然发现这上居然还有个可以发布页面的系统，于是又有了写点什么的想法。好吧，全部页面都在自己掌控下的感觉还是不错的，再也不怕丢失文章了。&lt;/p&gt;
&lt;p&gt;由于 Github Pages 的推荐，之前尝试过 Jekyll 和 jekyll-bootstrap，但感觉都不太顺手。Jekyll 有很高的灵活性，但是感觉内容和页面主题还是没有完全分开，如果想尝试几种不同风格的主题可能需要改动很多。此外，评论、分页等一些常用功能还需自己添加，较为繁琐 (我确实对前端 html css javascript 这套不是很熟)。jekyll-bootstrap 在这个方向做了不错的尝试，将不同风格主题分别置于不同 theme 目录下，并提供了 disqus、google analytics 等功能，可惜作者似乎已不再维护，转去开发了新的静态页面生成系统，项目开发似乎也不是很活跃。&lt;/p&gt;
&lt;p&gt;后来尝试寻找其他的静态页面生成系统，发现了评价很高的 Hexo 和 Pelican，前者基于 Node.js 开发，后者是 Python。两者似乎都很活跃，用的人也不少，由于 python 的缘故果断选择了 pelican，万一有点想法还可以尝试研究一下代码。&lt;/p&gt;
&lt;p&gt;总之先把大框架搭起来，以后再慢慢完善了，还要把以前的文章迁移过来，貌似工程量还不小...&lt;/p&gt;
&lt;p&gt;代码试验：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include&amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello Pelican ~ &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;公式试验：
&lt;div class="math"&gt;$$\int_0^{2\pi}\underbrace{\overbrace{\cosh^2x-\sinh^2x}^{=1}-\cos^2x}_{=\sin^2 x}dx=\pi$$&lt;/div&gt;
&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: 'center'," +
        "    displayIndent: '0em'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
        "    } " +
        "}); ";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="blog"></category><category term="pelican"></category><category term="jekyll"></category></entry></feed>